;/*****************************************************
;This program was produced by the
;CodeWizardAVR V2.05.3 Standard
;Automatic Program Generator
;© Copyright 1998-2011 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 6/30/2013
;Author  : Ardika
;Company : CrowjaEmbedder
;Comments:
;
;
;Chip type               : ATmega32
;Program type            : Application
;AVR Core Clock frequency: 16.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 512
;*****************************************************/
;
;#include <mega32.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <alcd.h>
;#include <delay.h>
;
;#define ADC_VREF_TYPE 0x60
;
;// definisi tombol-tombol
;#define CMD_UP      PINC.4
;#define CMD_DOWN    PINC.5
;#define CMD_OK      PINC.6
;#define CMD_CANCEL  PINC.7
;
;// Detektor persimpangan jalan
;#define RIGHT_WING  PIND.0
;#define LEFT_WING   PIND.1
;
;// definisi kendali motor
;#define RIGHT_PWM   OCR1AL
;#define LEFT_PWM    OCR1BL
;#define RIGHT_DR1   PORTD.6
;#define RIGHT_DR2   PORTD.7
;#define LEFT_DR1    PORTD.2
;#define LEFT_DR2    PORTD.3
;
;// definisi custom character LCD
;#define FULL_BLOCK  0
;#define EMPTY_BLOCK 1
;
;// definisi untuk melakukan kalibrasi
;#define CALIBRATING_COUNT   100
;
;
;flash unsigned char fullBlock[8] = {0b11111,
;                                    0b11111,
;                                    0b11111,
;                                    0b11111,
;                                    0b11111,
;                                    0b11111,
;                                    0b11111,
;                                    0b11111};
;
;flash unsigned char emptyBlock[8] = {0b11111,
;                                     0b10001,
;                                     0b10001,
;                                     0b10001,
;                                     0b10001,
;                                     0b10001,
;                                     0b10001,
;                                     0b11111};
;
;// Variabel-variabel kontrol yang tersimpan di memory non-volatile
;eeprom unsigned char eeMaxSpeed = 255;
;eeprom unsigned char eeKp = 0;
;eeprom unsigned char eeKd = 0;
;eeprom unsigned char eeKi = 0;
;
;// Varibel kepekaan sensor dalam memory non-volaitile
;eeprom unsigned char eeWhiteMin[8] = {0};   // Nilai pembacaan minimal untuk putih
;eeprom unsigned char eeBlackMax[8] = {0};  // Nilai pembacaan maksimal untuk hitam
;eeprom unsigned char eeMiddleVal[8] = {0};   // Nilai tengah antara white min dan black max
;
;// Varibael-varibel kontrol yang disimpan di memory volatile untuk perhitungan kontrol
;unsigned char maxSpeed;     // nilai kecepatan maksimal
;unsigned char kp;           // konstanta proposional
;unsigned char kd;           // konstanta derivatif
;unsigned char ki;           // konstanta integral
;unsigned char error;        // nilai error pembacaan sensor
;unsigned char sp;           // nilai set point sensor
;
;// Variabel kepekaan sensor dalam memory volatile untuk perhitungan
;unsigned char whiteMin[8] = {0};   // Nilai pembacaan minimal untuk putih
;unsigned char blackMax[8] = {0};  // Nilai pembacaan maksimal untuk hitam
;unsigned char middleVal[8] = {0};   // Nilai tengah antara white min dan black max
;
;// Varibel penyimpan nilai sensor biner, dimana tiap satu sensor nilainya diwakili oleh 1-bit
;// yang merupakan hasil perbandingan pembacaan nilai analog sensor dengan nilai kepekaan sensor
;unsigned char sensor = 0;
;
;//prototype fungsi
;void define_char(unsigned char flash *pc,unsigned char char_code);
;unsigned char read_adc(unsigned char adc_input);
;void scanLine();
;void loadVariables();
;void saveVariables();
;void lcdOn(unsigned char on);
;void lcdOnWing();
;void go();
;void back();
;void left();
;void right();
;void stop(unsigned char usingPowerBrake);
;void lcdPrintByte(unsigned char value);
;void printADCSensor();
;void printBinarySensor();
;
;void main(void)
; 0000 0078 {

	.CSEG
;PCODE: $0000000D VOL: 0
; 0000 0079 
; 0000 007A     PORTA=0x00;
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
; 0000 007B     DDRA=0x00;
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 007C 
; 0000 007D     PORTB=0xFF;
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 007E     DDRB=0xFF;
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 007F 
; 0000 0080     PORTC=0x00;
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 0081     DDRC=0x00;
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
; 0000 0082 
; 0000 0083     PORTD=0x00;
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 0084     DDRD=0xFC;
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 0085 
; 0000 0086     // Timer/Counter 0 initialization
; 0000 0087     // Clock source: System Clock
; 0000 0088     // Clock value: 2000.000 kHz
; 0000 0089     // Mode: Fast PWM top=0xFF
; 0000 008A     // OC0 output: Disconnected
; 0000 008B     TCCR0=0x4A;
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 008C     TCNT0=0x00;
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0000 008D     OCR0=0x0F;
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 008E 
; 0000 008F     // Timer/Counter 1 initialization
; 0000 0090     // Clock source: System Clock
; 0000 0091     // Clock value: 250.000 kHz
; 0000 0092     // Mode: Fast PWM top=0x00FF
; 0000 0093     // OC1A output: Non-Inv.
; 0000 0094     // OC1B output: Non-Inv.
; 0000 0095     // Noise Canceler: Off
; 0000 0096     // Input Capture on Falling Edge
; 0000 0097     // Timer1 Overflow Interrupt: Off
; 0000 0098     // Input Capture Interrupt: Off
; 0000 0099     // Compare A Match Interrupt: Off
; 0000 009A     // Compare B Match Interrupt: Off
; 0000 009B     TCCR1A=0xA1;
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0000 009C     TCCR1B=0x0B;
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0000 009D     TCNT1H=0x00;
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 009E     TCNT1L=0x00;
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0000 009F     ICR1H=0x00;
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 00A0     ICR1L=0x00;
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0000 00A1     OCR1AH=0x00;
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 00A2     OCR1AL=0x00;
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 00A3     OCR1BH=0x00;
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 00A4     OCR1BL=0x00;
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 00A5 
; 0000 00A6     // Timer/Counter 2 initialization
; 0000 00A7     // Clock source: System Clock
; 0000 00A8     // Clock value: Timer2 Stopped
; 0000 00A9     // Mode: Normal top=0xFF
; 0000 00AA     // OC2 output: Disconnected
; 0000 00AB     ASSR=0x00;
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0000 00AC     TCCR2=0x00;
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 00AD     TCNT2=0x00;
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 00AE     OCR2=0x00;
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 00AF 
; 0000 00B0     // External Interrupt(s) initialization
; 0000 00B1     // INT0: Off
; 0000 00B2     // INT1: Off
; 0000 00B3     // INT2: Off
; 0000 00B4     MCUCR=0x00;
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0000 00B5     MCUCSR=0x00;
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 00B6 
; 0000 00B7     // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 00B8     TIMSK=0x00;
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 00B9 
; 0000 00BA     // USART initialization
; 0000 00BB     // USART disabled
; 0000 00BC     UCSRB=0x00;
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0000 00BD 
; 0000 00BE     // Analog Comparator initialization
; 0000 00BF     // Analog Comparator: Off
; 0000 00C0     // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 00C1     ACSR=0x80;
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 00C2     SFIOR=0x00;
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 00C3 
; 0000 00C4     // ADC initialization
; 0000 00C5     // ADC Clock frequency: 125.000 kHz
; 0000 00C6     // ADC Voltage Reference: AVCC pin
; 0000 00C7     // Only the 8 most significant bits of
; 0000 00C8     // the AD conversion result are used
; 0000 00C9     ADMUX=ADC_VREF_TYPE & 0xff;
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0000 00CA     ADCSRA=0x87;
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 00CB 
; 0000 00CC     // SPI initialization
; 0000 00CD     // SPI disabled
; 0000 00CE     SPCR=0x00;
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 00CF 
; 0000 00D0     // TWI initialization
; 0000 00D1     // TWI disabled
; 0000 00D2     TWCR=0x00;
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0000 00D3 
; 0000 00D4 
; 0000 00D5     // Alphanumeric LCD initialization
; 0000 00D6     // Connections are specified in the
; 0000 00D7     // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
; 0000 00D8     // RS - PORTB Bit 0
; 0000 00D9     // RD - PORTB Bit 1
; 0000 00DA     // EN - PORTB Bit 2
; 0000 00DB     // D4 - PORTB Bit 4
; 0000 00DC     // D5 - PORTB Bit 5
; 0000 00DD     // D6 - PORTB Bit 6
; 0000 00DE     // D7 - PORTB Bit 7
; 0000 00DF     // Characters/line: 16
; 0000 00E0     lcd_init(16);
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 00E1     lcd_clear();
;PCODE: $00000056 VOL: 0
; 0000 00E2     define_char(fullBlock,FULL_BLOCK);
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 00E3     define_char(emptyBlock,EMPTY_BLOCK);
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 00E4     lcdOn(1);
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 00E5     lcd_clear();
;PCODE: $00000061 VOL: 0
; 0000 00E6 
; 0000 00E7     loadVariables();
;PCODE: $00000062 VOL: 0
; 0000 00E8 
; 0000 00E9     while (1) {
;PCODE: $00000063 VOL: 0
; 0000 00EA         lcd_gotoxy(0,0);
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0000 00EB         printADCSensor();
;PCODE: $00000068 VOL: 0
; 0000 00EC         //scanLine();
; 0000 00ED         //printBinarySensor();
; 0000 00EE 
; 0000 00EF     }
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 00F0 }
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;
;
;/* function used to define user characters */
;void define_char(unsigned char flash *pc,unsigned char char_code)
; 0000 00F5 {
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0000 00F6     unsigned char i,a;
; 0000 00F7     a=(char_code<<3) | 0x40;
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;	*pc -> Y+3
;	char_code -> Y+2
;	i -> R17
;	a -> R16
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0000 00F8     for (i=0; i<8; i++) lcd_write_byte(a++,*pc++);
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
; 0000 00F9 }
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;
;
;// Read the 8 most significant bits
;// of the AD conversion result
;unsigned char read_adc(unsigned char adc_input)
; 0000 00FF {
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
; 0000 0100     ADMUX=adc_input | (ADC_VREF_TYPE & 0xff);
;PCODE: $00000096 VOL: 0
;	adc_input -> Y+0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0000 0101     // Delay needed for the stabilization of the ADC input voltage
; 0000 0102     //delay_us(10);
; 0000 0103     // Start the AD conversion
; 0000 0104     ADCSRA|=0x40;
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
; 0000 0105     // Wait for the AD conversion to complete
; 0000 0106     while (!(ADCSRA & 0x10));
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
; 0000 0107         ADCSRA |= 0x10;
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
; 0000 0108     return ADCH;
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
; 0000 0109 }
;PCODE: $000000A7 VOL: 0
;
;
;void scanLine()
; 0000 010D {
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
; 0000 010E     unsigned char i = 0;
; 0000 010F     unsigned char adcRead[i];  // Variabel pembacaan nilai ADC
; 0000 0110     // JUmlah warna putih dan hitam yang terdeteksi oleh sensor
; 0000 0111     unsigned char blackCount = 0, whiteCount = 0;
; 0000 0112 
; 0000 0113     sensor = 0x00;   // Hapus nilai sensor sebelumnya
;PCODE: $000000AA VOL: 0
;	i -> R17
;	adcRead -> Y+4
;	blackCount -> R16
;	whiteCount -> R19
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
; 0000 0114 
; 0000 0115     for (; i<8; i++) {
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
; 0000 0116         adcRead[i] = read_adc(i);  // Baca nilai ADC ada bit ke-i
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
; 0000 0117         if (adcRead[i] > whiteMin[i])  // Jika hasil pembacaan > nilai putih
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
; 0000 0118             blackCount++;       // Increment jumlah blok hitam yang terbaca
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
; 0000 0119         else
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
; 0000 011A             whiteCount++;      // Increment jumlah blok putih yang terbaca
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
; 0000 011B     }
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
; 0000 011C     if (whiteCount > blackCount) {  // Banyaknya blok warna putih yang terdeteksi > dari blok warna hitam, maka garis nya adalah hitam
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
; 0000 011D         for (i=0; i<8; i++) {
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
; 0000 011E             if (adcRead[i] > whiteMin[i])
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
; 0000 011F                 sensor |= (1<<i);
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
; 0000 0120         }
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
; 0000 0121     }
; 0000 0122     else { // Banyaknya blok warna putih yang terdeteksi < dari blok warna hitam, maka garis nya adalah putih
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
; 0000 0123         for (i=0; i<8; i++) {
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
; 0000 0124             if (adcRead[i] < blackMax[i])
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
; 0000 0125                 sensor |= (1<<i);
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
; 0000 0126         }
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
; 0000 0127     }
;PCODE: $00000116 VOL: 0
; 0000 0128     lcdPrintByte(blackCount);
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
; 0000 0129 }
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;
;void loadVariables()
; 0000 012C {
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
; 0000 012D     unsigned char i = 0;
; 0000 012E 
; 0000 012F     maxSpeed = eeMaxSpeed;
;PCODE: $0000011F VOL: 0
;	i -> R17
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
; 0000 0130     kp = eeKp;
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
; 0000 0131     kd = eeKd;
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
; 0000 0132     ki = eeKi;
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
; 0000 0133 
; 0000 0134     for (; i<8; i++) {
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
; 0000 0135         whiteMin[i] = eeWhiteMin[i];
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
; 0000 0136         blackMax[i] = eeBlackMax[i];
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
; 0000 0137     }
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
; 0000 0138 }
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;
;void saveVariables()
; 0000 013B {
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
; 0000 013C     unsigned char i = 0;
; 0000 013D 
; 0000 013E     eeMaxSpeed = maxSpeed;
;PCODE: $00000153 VOL: 0
;	i -> R17
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
; 0000 013F     eeKp = kp;
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
; 0000 0140     eeKd = kd;
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
; 0000 0141     eeKi = ki;
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
; 0000 0142 
; 0000 0143     for (; i<8; i++) {
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
; 0000 0144         eeWhiteMin[i] = whiteMin[i];
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
; 0000 0145         eeBlackMax[i] = blackMax[i];
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
; 0000 0146     }
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
; 0000 0147 }
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
;
;
;void lcdOn(unsigned char on)
; 0000 014B {
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
; 0000 014C     PORTB.3 = on;
;PCODE: $00000183 VOL: 0
;	on -> Y+0
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
; 0000 014D }
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
;
;void lcdOnWing()
; 0000 0150 {
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
; 0000 0151     PORTB.3 = !((LEFT_WING) | (RIGHT_WING));
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
; 0000 0152 }
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
;
;void go()
; 0000 0155 {
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
; 0000 0156     RIGHT_DR1 = 0; RIGHT_DR2 = 1;
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
; 0000 0157     LEFT_DR1 = 0; LEFT_DR2 = 1;
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
; 0000 0158 }
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
;
;void back()
; 0000 015B {
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
; 0000 015C     RIGHT_DR1 = 1; RIGHT_DR2 = 0;
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
; 0000 015D     LEFT_DR1 = 1; LEFT_DR2 = 0;
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
; 0000 015E }
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
;
;void left()
; 0000 0161 {
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
; 0000 0162     RIGHT_DR1 = 0; RIGHT_DR2 = 1;
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
; 0000 0163     LEFT_DR1 = 0; LEFT_DR2 = 0;
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
; 0000 0164 }
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
;
;void right()
; 0000 0167 {
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
; 0000 0168     RIGHT_DR1 = 0; RIGHT_DR2 = 0;
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
; 0000 0169     LEFT_DR1 = 0; LEFT_DR2 = 1;
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
; 0000 016A }
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
;
;void stop(unsigned char usingPowerBrake)
; 0000 016D {
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
; 0000 016E     RIGHT_DR1 = RIGHT_DR2 = LEFT_DR1 = LEFT_DR2 = 0;
;PCODE: $000001D4 VOL: 0
;	usingPowerBrake -> Y+0
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
; 0000 016F     if (usingPowerBrake) {
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
; 0000 0170         back();
;PCODE: $000001E0 VOL: 0
; 0000 0171         LEFT_PWM = RIGHT_PWM = 255;
;PCODE: $000001E1 VOL: 0
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
; 0000 0172         delay_ms(100);
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
; 0000 0173         LEFT_PWM = RIGHT_PWM = 0;
;PCODE: $000001E7 VOL: 0
;PCODE: $000001E8 VOL: 0
;PCODE: $000001E9 VOL: 0
; 0000 0174     }
; 0000 0175 
; 0000 0176 }
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 0
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
;
;
;
;void lcdPrintByte(unsigned char value)
; 0000 017B {
;PCODE: $000001EE VOL: 0
;PCODE: $000001EF VOL: 0
; 0000 017C     unsigned char ten = (value % 100) / 10;
; 0000 017D     lcd_putchar('0' + (value / 100));
;PCODE: $000001F0 VOL: 0
;PCODE: $000001F1 VOL: 0
;	value -> Y+1
;	ten -> R17
;PCODE: $000001F2 VOL: 0
;PCODE: $000001F3 VOL: 0
;PCODE: $000001F4 VOL: 0
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
;PCODE: $000001F7 VOL: 0
;PCODE: $000001F8 VOL: 0
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0
;PCODE: $000001FB VOL: 0
;PCODE: $000001FC VOL: 0
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
;PCODE: $000001FF VOL: 0
;PCODE: $00000200 VOL: 0
; 0000 017E     lcd_putchar('0' + ten);
;PCODE: $00000201 VOL: 0
;PCODE: $00000202 VOL: 0
;PCODE: $00000203 VOL: 0
; 0000 017F     lcd_putchar('0' + (value % 10));
;PCODE: $00000204 VOL: 0
;PCODE: $00000205 VOL: 0
;PCODE: $00000206 VOL: 0
;PCODE: $00000207 VOL: 0
;PCODE: $00000208 VOL: 0
;PCODE: $00000209 VOL: 0
;PCODE: $0000020A VOL: 0
; 0000 0180 }
;PCODE: $0000020B VOL: 0
;PCODE: $0000020C VOL: 0
;PCODE: $0000020D VOL: 0
;PCODE: $0000020E VOL: 0
;PCODE: $0000020F VOL: 0
;
;void printADCSensor()
; 0000 0183 {
;PCODE: $00000210 VOL: 0
;PCODE: $00000211 VOL: 0
; 0000 0184     lcd_gotoxy(0,0); lcdPrintByte(read_adc(0));
;PCODE: $00000212 VOL: 0
;PCODE: $00000213 VOL: 0
;PCODE: $00000214 VOL: 0
;PCODE: $00000215 VOL: 0
;PCODE: $00000216 VOL: 0
;PCODE: $00000217 VOL: 0
;PCODE: $00000218 VOL: 0
;PCODE: $00000219 VOL: 0
; 0000 0185     lcd_gotoxy(4,0); lcdPrintByte(read_adc(1));
;PCODE: $0000021A VOL: 0
;PCODE: $0000021B VOL: 0
;PCODE: $0000021C VOL: 0
;PCODE: $0000021D VOL: 0
;PCODE: $0000021E VOL: 0
;PCODE: $0000021F VOL: 0
;PCODE: $00000220 VOL: 0
;PCODE: $00000221 VOL: 0
; 0000 0186     lcd_gotoxy(8,0); lcdPrintByte(read_adc(2));
;PCODE: $00000222 VOL: 0
;PCODE: $00000223 VOL: 0
;PCODE: $00000224 VOL: 0
;PCODE: $00000225 VOL: 0
;PCODE: $00000226 VOL: 0
;PCODE: $00000227 VOL: 0
;PCODE: $00000228 VOL: 0
;PCODE: $00000229 VOL: 0
; 0000 0187     lcd_gotoxy(12,0); lcdPrintByte(read_adc(3));
;PCODE: $0000022A VOL: 0
;PCODE: $0000022B VOL: 0
;PCODE: $0000022C VOL: 0
;PCODE: $0000022D VOL: 0
;PCODE: $0000022E VOL: 0
;PCODE: $0000022F VOL: 0
;PCODE: $00000230 VOL: 0
;PCODE: $00000231 VOL: 0
; 0000 0188     lcd_gotoxy(0,1); lcdPrintByte(read_adc(4));
;PCODE: $00000232 VOL: 0
;PCODE: $00000233 VOL: 0
;PCODE: $00000234 VOL: 0
;PCODE: $00000235 VOL: 0
;PCODE: $00000236 VOL: 0
;PCODE: $00000237 VOL: 0
;PCODE: $00000238 VOL: 0
;PCODE: $00000239 VOL: 0
; 0000 0189     lcd_gotoxy(4,1); lcdPrintByte(read_adc(5));
;PCODE: $0000023A VOL: 0
;PCODE: $0000023B VOL: 0
;PCODE: $0000023C VOL: 0
;PCODE: $0000023D VOL: 0
;PCODE: $0000023E VOL: 0
;PCODE: $0000023F VOL: 0
;PCODE: $00000240 VOL: 0
;PCODE: $00000241 VOL: 0
; 0000 018A     lcd_gotoxy(8,1); lcdPrintByte(read_adc(6));
;PCODE: $00000242 VOL: 0
;PCODE: $00000243 VOL: 0
;PCODE: $00000244 VOL: 0
;PCODE: $00000245 VOL: 0
;PCODE: $00000246 VOL: 0
;PCODE: $00000247 VOL: 0
;PCODE: $00000248 VOL: 0
;PCODE: $00000249 VOL: 0
; 0000 018B     lcd_gotoxy(12,1); lcdPrintByte(read_adc(7));
;PCODE: $0000024A VOL: 0
;PCODE: $0000024B VOL: 0
;PCODE: $0000024C VOL: 0
;PCODE: $0000024D VOL: 0
;PCODE: $0000024E VOL: 0
;PCODE: $0000024F VOL: 0
;PCODE: $00000250 VOL: 0
;PCODE: $00000251 VOL: 0
; 0000 018C }
;PCODE: $00000252 VOL: 0
;PCODE: $00000253 VOL: 0
;
;void printBinarySensor()
; 0000 018F {
;PCODE: $00000254 VOL: 0
;PCODE: $00000255 VOL: 0
; 0000 0190     unsigned char i = 0;
; 0000 0191 
; 0000 0192     for (; i<8; i++) {
;PCODE: $00000256 VOL: 0
;	i -> R17
;PCODE: $00000257 VOL: 0
;PCODE: $00000258 VOL: 0
;PCODE: $00000259 VOL: 0
;PCODE: $0000025A VOL: 0
;PCODE: $0000025B VOL: 0
;PCODE: $0000025C VOL: 0
;PCODE: $0000025D VOL: 0
;PCODE: $0000025E VOL: 0
;PCODE: $0000025F VOL: 0
; 0000 0193         if (sensor & (1<<i))
;PCODE: $00000260 VOL: 0
;PCODE: $00000261 VOL: 0
;PCODE: $00000262 VOL: 0
;PCODE: $00000263 VOL: 0
;PCODE: $00000264 VOL: 0
;PCODE: $00000265 VOL: 0
;PCODE: $00000266 VOL: 0
;PCODE: $00000267 VOL: 0
; 0000 0194             lcd_putchar(FULL_BLOCK);
;PCODE: $00000268 VOL: 0
;PCODE: $00000269 VOL: 0
; 0000 0195         else
;PCODE: $0000026A VOL: 0
;PCODE: $0000026B VOL: 0
; 0000 0196             lcd_putchar(EMPTY_BLOCK);
;PCODE: $0000026C VOL: 0
;PCODE: $0000026D VOL: 0
; 0000 0197     }
;PCODE: $0000026E VOL: 0
;PCODE: $0000026F VOL: 0
;PCODE: $00000270 VOL: 0
;PCODE: $00000271 VOL: 0
;PCODE: $00000272 VOL: 0
;PCODE: $00000273 VOL: 0
; 0000 0198 }
;PCODE: $00000274 VOL: 0
;PCODE: $00000275 VOL: 0
;PCODE: $00000276 VOL: 0
;
;
;
;
;
;////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
;//// REGION CALIBRATING FUNCTIONS //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
;////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
;/*
;    PROSEDUR MELAKUKAN KALIBRASI:
;        Panggil kedua fungsi blackCalibrating() dan whiteCalibrating()
;        Panggil fungsi applyCalibratedValue()
;*/
;
;void blackCalibrating()
; 0000 01A8 {
;PCODE: $00000277 VOL: 0
;PCODE: $00000278 VOL: 0
; 0000 01A9     unsigned char i;
; 0000 01AA     unsigned char calibratingCount;   // Jumlah kalkulasi kalibrasi untuk tiap sensor
; 0000 01AB     unsigned char calibratedBlackMax;  // Nilai hitam maksimal hasil kalibrasi hitam, untuk tiap sensor
; 0000 01AC     unsigned char readADC;  // nilai pembacaan ADC
; 0000 01AD     unsigned char tolerance;  // nilai toleransi
; 0000 01AE 
; 0000 01AF     // Kalibrasi HItam
; 0000 01B0     for (i=0; i<8; i++) {
;PCODE: $00000279 VOL: 0
;	i -> R17
;	calibratingCount -> R16
;	calibratedBlackMax -> R19
;	readADC -> R18
;	tolerance -> R21
;PCODE: $0000027A VOL: 0
;PCODE: $0000027B VOL: 0
;PCODE: $0000027C VOL: 0
;PCODE: $0000027D VOL: 0
;PCODE: $0000027E VOL: 0
;PCODE: $0000027F VOL: 0
;PCODE: $00000280 VOL: 0
;PCODE: $00000281 VOL: 0
;PCODE: $00000282 VOL: 0
; 0000 01B1         calibratingCount = CALIBRATING_COUNT;
;PCODE: $00000283 VOL: 0
;PCODE: $00000284 VOL: 0
; 0000 01B2         calibratedBlackMax = 0;     // Atur nilainya menjadi nilai minimal tipedata unsigned byte, karena kita akan mencari nilai maksimum
;PCODE: $00000285 VOL: 0
;PCODE: $00000286 VOL: 0
; 0000 01B3         while (calibratingCount--) {
;PCODE: $00000287 VOL: 0
;PCODE: $00000288 VOL: 0
;PCODE: $00000289 VOL: 0
;PCODE: $0000028A VOL: 0
;PCODE: $0000028B VOL: 0
;PCODE: $0000028C VOL: 0
; 0000 01B4             readADC = read_adc(i);
;PCODE: $0000028D VOL: 0
;PCODE: $0000028E VOL: 0
;PCODE: $0000028F VOL: 0
; 0000 01B5             if (readADC > calibratedBlackMax)
;PCODE: $00000290 VOL: 0
;PCODE: $00000291 VOL: 0
;PCODE: $00000292 VOL: 0
; 0000 01B6                 calibratedBlackMax = readADC;
;PCODE: $00000293 VOL: 0
;PCODE: $00000294 VOL: 0
; 0000 01B7         }
;PCODE: $00000295 VOL: 0
;PCODE: $00000296 VOL: 0
;PCODE: $00000297 VOL: 0
; 0000 01B8         if (calibratedBlackMax < 255)
;PCODE: $00000298 VOL: 0
;PCODE: $00000299 VOL: 0
;PCODE: $0000029A VOL: 0
; 0000 01B9             tolerance = (255 - calibratedBlackMax);     // hitung nilai toleransi
;PCODE: $0000029B VOL: 0
;PCODE: $0000029C VOL: 0
;PCODE: $0000029D VOL: 0
; 0000 01BA         else
;PCODE: $0000029E VOL: 0
;PCODE: $0000029F VOL: 0
; 0000 01BB             tolerance = 0;
;PCODE: $000002A0 VOL: 0
;PCODE: $000002A1 VOL: 0
; 0000 01BC         blackMax[i] = eeBlackMax[i] = (calibratedBlackMax + tolerance);  // simpan nilai kalibarasi di ram sekaligus di eeprom
;PCODE: $000002A2 VOL: 0
;PCODE: $000002A3 VOL: 0
;PCODE: $000002A4 VOL: 0
;PCODE: $000002A5 VOL: 0
;PCODE: $000002A6 VOL: 0
;PCODE: $000002A7 VOL: 0
;PCODE: $000002A8 VOL: 0
;PCODE: $000002A9 VOL: 0
;PCODE: $000002AA VOL: 0
;PCODE: $000002AB VOL: 0
;PCODE: $000002AC VOL: 0
;PCODE: $000002AD VOL: 0
;PCODE: $000002AE VOL: 0
; 0000 01BD     }
;PCODE: $000002AF VOL: 0
;PCODE: $000002B0 VOL: 0
;PCODE: $000002B1 VOL: 0
;PCODE: $000002B2 VOL: 0
;PCODE: $000002B3 VOL: 0
; 0000 01BE 
; 0000 01BF }
;PCODE: $000002B4 VOL: 0
;PCODE: $000002B5 VOL: 0
;PCODE: $000002B6 VOL: 0
;PCODE: $000002B7 VOL: 0
;
;void whiteCalibrating()
; 0000 01C2 {
;PCODE: $000002B8 VOL: 0
;PCODE: $000002B9 VOL: 0
; 0000 01C3     unsigned char i;
; 0000 01C4     unsigned char calibratingCount;   // Jumlah kalkulasi kalibrasi untuk tiap sensor
; 0000 01C5     unsigned char calibratedWhiteMin;  // Nilai hitam minimum hasil kalibrasi putih, untuk tiap sensor
; 0000 01C6     unsigned char readADC;  // nilai pembacaan ADC
; 0000 01C7     unsigned char tolerance;  // nilai toleransi
; 0000 01C8 
; 0000 01C9     // Kalibrasi HItam
; 0000 01CA     for (i=0; i<8; i++) {
;PCODE: $000002BA VOL: 0
;	i -> R17
;	calibratingCount -> R16
;	calibratedWhiteMin -> R19
;	readADC -> R18
;	tolerance -> R21
;PCODE: $000002BB VOL: 0
;PCODE: $000002BC VOL: 0
;PCODE: $000002BD VOL: 0
;PCODE: $000002BE VOL: 0
;PCODE: $000002BF VOL: 0
;PCODE: $000002C0 VOL: 0
;PCODE: $000002C1 VOL: 0
;PCODE: $000002C2 VOL: 0
;PCODE: $000002C3 VOL: 0
; 0000 01CB         calibratingCount = CALIBRATING_COUNT;
;PCODE: $000002C4 VOL: 0
;PCODE: $000002C5 VOL: 0
; 0000 01CC         calibratedWhiteMin = 255;     // Atur nilainya menjadi nilai maksimal tipedata unsigned byte, karena kita akan mencari nilai minimum
;PCODE: $000002C6 VOL: 0
;PCODE: $000002C7 VOL: 0
; 0000 01CD         while (calibratingCount--) {
;PCODE: $000002C8 VOL: 0
;PCODE: $000002C9 VOL: 0
;PCODE: $000002CA VOL: 0
;PCODE: $000002CB VOL: 0
;PCODE: $000002CC VOL: 0
;PCODE: $000002CD VOL: 0
; 0000 01CE             readADC = read_adc(i);
;PCODE: $000002CE VOL: 0
;PCODE: $000002CF VOL: 0
;PCODE: $000002D0 VOL: 0
; 0000 01CF             if (readADC < calibratedWhiteMin)
;PCODE: $000002D1 VOL: 0
;PCODE: $000002D2 VOL: 0
;PCODE: $000002D3 VOL: 0
; 0000 01D0                 calibratedWhiteMin = readADC;
;PCODE: $000002D4 VOL: 0
;PCODE: $000002D5 VOL: 0
; 0000 01D1         }
;PCODE: $000002D6 VOL: 0
;PCODE: $000002D7 VOL: 0
;PCODE: $000002D8 VOL: 0
; 0000 01D2         if (calibratedWhiteMin > 0)
;PCODE: $000002D9 VOL: 0
;PCODE: $000002DA VOL: 0
;PCODE: $000002DB VOL: 0
; 0000 01D3             tolerance = calibratedWhiteMin / 2;     // hitung nilai toleransi
;PCODE: $000002DC VOL: 0
;PCODE: $000002DD VOL: 0
;PCODE: $000002DE VOL: 0
;PCODE: $000002DF VOL: 0
;PCODE: $000002E0 VOL: 0
; 0000 01D4         else
;PCODE: $000002E1 VOL: 0
;PCODE: $000002E2 VOL: 0
; 0000 01D5             tolerance = 0;
;PCODE: $000002E3 VOL: 0
;PCODE: $000002E4 VOL: 0
; 0000 01D6         whiteMin[i] = eeWhiteMin[i] = (calibratedWhiteMin - tolerance);  // simpan nilai kalibarasi di ram sekaligus di eeprom
;PCODE: $000002E5 VOL: 0
;PCODE: $000002E6 VOL: 0
;PCODE: $000002E7 VOL: 0
;PCODE: $000002E8 VOL: 0
;PCODE: $000002E9 VOL: 0
;PCODE: $000002EA VOL: 0
;PCODE: $000002EB VOL: 0
;PCODE: $000002EC VOL: 0
;PCODE: $000002ED VOL: 0
;PCODE: $000002EE VOL: 0
;PCODE: $000002EF VOL: 0
;PCODE: $000002F0 VOL: 0
;PCODE: $000002F1 VOL: 0
; 0000 01D7     }
;PCODE: $000002F2 VOL: 0
;PCODE: $000002F3 VOL: 0
;PCODE: $000002F4 VOL: 0
;PCODE: $000002F5 VOL: 0
;PCODE: $000002F6 VOL: 0
; 0000 01D8 }
;PCODE: $000002F7 VOL: 0
;PCODE: $000002F8 VOL: 0
;PCODE: $000002F9 VOL: 0
;PCODE: $000002FA VOL: 0
;
;void applyCalibratedValue()
; 0000 01DB {
;PCODE: $000002FB VOL: 0
;PCODE: $000002FC VOL: 0
; 0000 01DC     unsigned char i = 0;
; 0000 01DD 
; 0000 01DE     for (; i<8; i++)
;PCODE: $000002FD VOL: 0
;	i -> R17
;PCODE: $000002FE VOL: 0
;PCODE: $000002FF VOL: 0
;PCODE: $00000300 VOL: 0
;PCODE: $00000301 VOL: 0
;PCODE: $00000302 VOL: 0
;PCODE: $00000303 VOL: 0
;PCODE: $00000304 VOL: 0
;PCODE: $00000305 VOL: 0
;PCODE: $00000306 VOL: 0
; 0000 01DF         middleVal[i] = eeMiddleVal[i] = ((blackMax[i] - whiteMin[i]) / 2);
;PCODE: $00000307 VOL: 0
;PCODE: $00000308 VOL: 0
;PCODE: $00000309 VOL: 0
;PCODE: $0000030A VOL: 0
;PCODE: $0000030B VOL: 0
;PCODE: $0000030C VOL: 0
;PCODE: $0000030D VOL: 0
;PCODE: $0000030E VOL: 0
;PCODE: $0000030F VOL: 0
;PCODE: $00000310 VOL: 0
;PCODE: $00000311 VOL: 0
;PCODE: $00000312 VOL: 0
;PCODE: $00000313 VOL: 0
;PCODE: $00000314 VOL: 0
;PCODE: $00000315 VOL: 0
;PCODE: $00000316 VOL: 0
;PCODE: $00000317 VOL: 0
;PCODE: $00000318 VOL: 0
;PCODE: $00000319 VOL: 0
;PCODE: $0000031A VOL: 0
;PCODE: $0000031B VOL: 0
;PCODE: $0000031C VOL: 0
;PCODE: $0000031D VOL: 0
;PCODE: $0000031E VOL: 0
;PCODE: $0000031F VOL: 0
;PCODE: $00000320 VOL: 0
;PCODE: $00000321 VOL: 0
;PCODE: $00000322 VOL: 0
;PCODE: $00000323 VOL: 0
;PCODE: $00000324 VOL: 0
; 0000 01E0 }
;PCODE: $00000325 VOL: 0
;PCODE: $00000326 VOL: 0
;PCODE: $00000327 VOL: 0
;
;
;
;////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
;//// END OF REGION CALIBRATING FUNCTIONS ///////////////////////////////////////////////////////////////////////////////////////////////////////////////
;////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
