;/*****************************************************
;This program was produced by the
;CodeWizardAVR V2.05.3 Standard
;Automatic Program Generator
;© Copyright 1998-2011 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 6/30/2013
;Author  : Ardika
;Company : CrowjaEmbedder
;Comments:
;
;
;Chip type               : ATmega32
;Program type            : Application
;AVR Core Clock frequency: 16.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 512
;*****************************************************/
;
;#include <mega32.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <alcd.h>
;#include <delay.h>
;
;#define ADC_VREF_TYPE 0x60
;
;#define CMD_UP      PINC.4
;#define CMD_DOWN    PINC.5
;#define CMD_OK      PINC.6
;#define CMD_CANCEL  PINC.7
;
;#define RIGHT_WING  PIND.0
;#define LEFT_WING   PIND.1
;
;#define RIGHT_PWM   OCR1AL
;#define LEFT_PWM    OCR1BL
;#define RIGHT_DR1   PORTD.6
;#define RIGHT_DR2   PORTD.7
;#define LEFT_DR1    PORTD.2
;#define LEFT_DR2    PORTD.3
;
;// Declare your global variables here
;
;
;void lcdOn(unsigned char on)
; 0000 0031 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0032     PORTB.3 = on;
;PCODE: $0000000F VOL: 0
;	on -> Y+0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
; 0000 0033 }
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;
;void lcdOnWing()
; 0000 0036 {
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 0037     PORTB.3 = !((LEFT_WING) | (RIGHT_WING));
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0000 0038 }
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;
;void go()
; 0000 003B {
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0000 003C     RIGHT_DR1 = 0; RIGHT_DR2 = 1;
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 003D     LEFT_DR1 = 0; LEFT_DR2 = 1;
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 003E }
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;
;void back()
; 0000 0041 {
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 0042     RIGHT_DR1 = 1; RIGHT_DR2 = 0;
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 0043     LEFT_DR1 = 1; LEFT_DR2 = 0;
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 0044 }
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;
;void left()
; 0000 0047 {
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0000 0048     RIGHT_DR1 = 0; RIGHT_DR2 = 1;
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 0049     LEFT_DR1 = 0; LEFT_DR2 = 0;
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 004A }
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;
;void right()
; 0000 004D {
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0000 004E     RIGHT_DR1 = 0; RIGHT_DR2 = 0;
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0000 004F     LEFT_DR1 = 0; LEFT_DR2 = 1;
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0000 0050 }
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;
;void stop(unsigned char usingPowerBrake)
; 0000 0053 {
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0000 0054     RIGHT_DR1 = RIGHT_DR2 = LEFT_DR1 = LEFT_DR2 = 0;
;PCODE: $00000060 VOL: 0
;	usingPowerBrake -> Y+0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0000 0055     if (usingPowerBrake) {
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 0000 0056         back();
;PCODE: $0000006C VOL: 0
; 0000 0057         LEFT_PWM = RIGHT_PWM = 255;
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0000 0058         delay_ms(100);
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0000 0059         LEFT_PWM = RIGHT_PWM = 0;
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0000 005A     }
; 0000 005B 
; 0000 005C }
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;
;// Read the 8 most significant bits
;// of the AD conversion result
;unsigned char read_adc(unsigned char adc_input)
; 0000 0061 {
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0000 0062     ADMUX=adc_input | (ADC_VREF_TYPE & 0xff);
;PCODE: $0000007C VOL: 0
;	adc_input -> Y+0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0000 0063     // Delay needed for the stabilization of the ADC input voltage
; 0000 0064     //delay_us(10);
; 0000 0065     // Start the AD conversion
; 0000 0066     ADCSRA|=0x40;
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0000 0067     // Wait for the AD conversion to complete
; 0000 0068     while (!(ADCSRA & 0x10));
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
; 0000 0069         ADCSRA |= 0x10;
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
; 0000 006A     return ADCH;
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
; 0000 006B }
;PCODE: $0000008D VOL: 0
;
;void lcdPutsByte(unsigned char value)
; 0000 006E {
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
; 0000 006F     unsigned char ten = (value % 100) / 10;
; 0000 0070     lcd_putchar('0' + (value / 100));
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;	value -> Y+1
;	ten -> R17
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
; 0000 0071     lcd_putchar('0' + ten);
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
; 0000 0072     lcd_putchar('0' + (value % 10));
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
; 0000 0073 }
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;
;void printSensor()
; 0000 0076 {
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
; 0000 0077     lcd_gotoxy(0,0); lcdPutsByte(read_adc(0));
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
; 0000 0078     lcd_gotoxy(4,0); lcdPutsByte(read_adc(1));
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
; 0000 0079     lcd_gotoxy(8,0); lcdPutsByte(read_adc(2));
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
; 0000 007A     lcd_gotoxy(12,0); lcdPutsByte(read_adc(3));
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
; 0000 007B     lcd_gotoxy(0,1); lcdPutsByte(read_adc(4));
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
; 0000 007C     lcd_gotoxy(4,1); lcdPutsByte(read_adc(5));
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
; 0000 007D     lcd_gotoxy(8,1); lcdPutsByte(read_adc(6));
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
; 0000 007E     lcd_gotoxy(12,1); lcdPutsByte(read_adc(7));
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
; 0000 007F }
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;
;void main(void)
; 0000 0082 {
;PCODE: $000000F4 VOL: 0
; 0000 0083 
; 0000 0084 PORTA=0x00;
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
; 0000 0085 DDRA=0x00;
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
; 0000 0086 
; 0000 0087 PORTB=0xFF;
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
; 0000 0088 DDRB=0xFF;
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
; 0000 0089 
; 0000 008A PORTC=0x00;
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
; 0000 008B DDRC=0x00;
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
; 0000 008C 
; 0000 008D PORTD=0x00;
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
; 0000 008E DDRD=0xFC;
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
; 0000 008F 
; 0000 0090 // Timer/Counter 0 initialization
; 0000 0091 // Clock source: System Clock
; 0000 0092 // Clock value: 2000.000 kHz
; 0000 0093 // Mode: Fast PWM top=0xFF
; 0000 0094 // OC0 output: Disconnected
; 0000 0095 TCCR0=0x4A;
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
; 0000 0096 TCNT0=0x00;
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
; 0000 0097 OCR0=0x0F;
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
; 0000 0098 
; 0000 0099 // Timer/Counter 1 initialization
; 0000 009A // Clock source: System Clock
; 0000 009B // Clock value: 250.000 kHz
; 0000 009C // Mode: Fast PWM top=0x00FF
; 0000 009D // OC1A output: Non-Inv.
; 0000 009E // OC1B output: Non-Inv.
; 0000 009F // Noise Canceler: Off
; 0000 00A0 // Input Capture on Falling Edge
; 0000 00A1 // Timer1 Overflow Interrupt: Off
; 0000 00A2 // Input Capture Interrupt: Off
; 0000 00A3 // Compare A Match Interrupt: Off
; 0000 00A4 // Compare B Match Interrupt: Off
; 0000 00A5 TCCR1A=0xA1;
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
; 0000 00A6 TCCR1B=0x0B;
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
; 0000 00A7 TCNT1H=0x00;
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
; 0000 00A8 TCNT1L=0x00;
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
; 0000 00A9 ICR1H=0x00;
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
; 0000 00AA ICR1L=0x00;
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
; 0000 00AB OCR1AH=0x00;
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
; 0000 00AC OCR1AL=0x00;
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
; 0000 00AD OCR1BH=0x00;
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
; 0000 00AE OCR1BL=0x00;
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
; 0000 00AF 
; 0000 00B0 // Timer/Counter 2 initialization
; 0000 00B1 // Clock source: System Clock
; 0000 00B2 // Clock value: Timer2 Stopped
; 0000 00B3 // Mode: Normal top=0xFF
; 0000 00B4 // OC2 output: Disconnected
; 0000 00B5 ASSR=0x00;
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
; 0000 00B6 TCCR2=0x00;
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
; 0000 00B7 TCNT2=0x00;
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
; 0000 00B8 OCR2=0x00;
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
; 0000 00B9 
; 0000 00BA // External Interrupt(s) initialization
; 0000 00BB // INT0: Off
; 0000 00BC // INT1: Off
; 0000 00BD // INT2: Off
; 0000 00BE MCUCR=0x00;
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
; 0000 00BF MCUCSR=0x00;
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
; 0000 00C0 
; 0000 00C1 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 00C2 TIMSK=0x00;
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
; 0000 00C3 
; 0000 00C4 // USART initialization
; 0000 00C5 // USART disabled
; 0000 00C6 UCSRB=0x00;
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
; 0000 00C7 
; 0000 00C8 // Analog Comparator initialization
; 0000 00C9 // Analog Comparator: Off
; 0000 00CA // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 00CB ACSR=0x80;
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
; 0000 00CC SFIOR=0x00;
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
; 0000 00CD 
; 0000 00CE // ADC initialization
; 0000 00CF // ADC Clock frequency: 125.000 kHz
; 0000 00D0 // ADC Voltage Reference: AVCC pin
; 0000 00D1 // Only the 8 most significant bits of
; 0000 00D2 // the AD conversion result are used
; 0000 00D3 ADMUX=ADC_VREF_TYPE & 0xff;
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
; 0000 00D4 ADCSRA=0x87;
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
; 0000 00D5 
; 0000 00D6 // SPI initialization
; 0000 00D7 // SPI disabled
; 0000 00D8 SPCR=0x00;
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
; 0000 00D9 
; 0000 00DA // TWI initialization
; 0000 00DB // TWI disabled
; 0000 00DC TWCR=0x00;
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
; 0000 00DD 
; 0000 00DE 
; 0000 00DF // Alphanumeric LCD initialization
; 0000 00E0 // Connections are specified in the
; 0000 00E1 // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
; 0000 00E2 // RS - PORTB Bit 0
; 0000 00E3 // RD - PORTB Bit 1
; 0000 00E4 // EN - PORTB Bit 2
; 0000 00E5 // D4 - PORTB Bit 4
; 0000 00E6 // D5 - PORTB Bit 5
; 0000 00E7 // D6 - PORTB Bit 6
; 0000 00E8 // D7 - PORTB Bit 7
; 0000 00E9 // Characters/line: 16
; 0000 00EA lcd_init(16);
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
; 0000 00EB lcd_clear();
;PCODE: $0000013D VOL: 0
; 0000 00EC 
; 0000 00ED go();
;PCODE: $0000013E VOL: 0
; 0000 00EE LEFT_PWM = RIGHT_PWM = 255;
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
; 0000 00EF delay_ms(3000);
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
; 0000 00F0 stop(1);
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
; 0000 00F1 lcdOn(1);
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
; 0000 00F2 
; 0000 00F3 
; 0000 00F4 
; 0000 00F5     while (1) {
;PCODE: $00000148 VOL: 0
; 0000 00F6 
; 0000 00F7     }
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
; 0000 00F8 }
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
